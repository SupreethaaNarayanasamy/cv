import tensorflow_datasets as tfds
import cv2
import matplotlib.pyplot as plt
import numpy as np

# 1️⃣ Load a grayscale dataset (MNIST)
dataset, info = tfds.load('mnist', split='train', with_info=True)
# Take one image
for example in dataset.take(1):
    image = example['image'].numpy()  # shape (28,28,1)
    break

# 2️⃣ Convert to proper grayscale format (OpenCV expects 2D)
gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY) if image.shape[-1]==3 else image.squeeze()

# 3️⃣ Apply Canny Edge Detection
# Step 1: Smoothing (Gaussian Blur)
blur = cv2.GaussianBlur(gray, (5,5), 1.4)

# Step 2 & 3: Gradient calculation + Non-maximum suppression (done inside Canny)
edges = cv2.Canny(blur, threshold1=50, threshold2=150)

# 4️⃣ Plot original and edges
plt.figure(figsize=(8,4))
plt.subplot(1,2,1)
plt.imshow(gray, cmap='gray')
plt.title("Original Image")
plt.axis('off')

plt.subplot(1,2,2)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edges")
plt.axis('off')
plt.show()
